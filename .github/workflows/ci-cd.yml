name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: devops-automation-app
  ECS_SERVICE: devops-automation-service
  ECS_CLUSTER: devops-automation-cluster
  ECS_TASK_DEFINITION: devops-automation-app
  CONTAINER_NAME: devops-automation-app

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd src/app
        npm install

    - name: Run linting
      run: |
        cd src/app
        npm run lint

    - name: Run tests
      run: |
        cd src/app
        npm test

    - name: Build Docker image
      run: |
        cd src/app
        docker build -f ../../docker/Dockerfile -t $ECR_REPOSITORY:$GITHUB_SHA .

    - name: Test Docker image locally
      run: |
        docker run -d -p 3000:3000 --name test-container $ECR_REPOSITORY:$GITHUB_SHA
        sleep 15
        echo "Testing health endpoint..."
        HEALTH_RESPONSE=$(curl -s http://localhost:3000/health)
        echo "Health response: $HEALTH_RESPONSE"
        curl -f http://localhost:3000/health || exit 1
        echo "Testing main endpoint..."
        MAIN_RESPONSE=$(curl -s http://localhost:3000)
        echo "Main response: $MAIN_RESPONSE"
        curl -f http://localhost:3000 || exit 1
        echo "Testing API endpoint..."
        API_RESPONSE=$(curl -s http://localhost:3000/api)
        echo "API response: $API_RESPONSE"
        curl -f http://localhost:3000/api || exit 1
        echo "All Docker tests passed!"
        docker stop test-container
        docker rm test-container

  # Job 2: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'src/app'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && success()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Output Verification Test
  output-verification:
    name: Output Verification Test
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd src/app
        npm install

    - name: Build Docker image for verification
      run: |
        cd src/app
        docker build -f ../../docker/Dockerfile -t verification-app .

    - name: Test and verify output matches local
      run: |
        docker run -d -p 3000:3000 --name verification-container verification-app
        sleep 15
        
        echo "=== VERIFYING OUTPUT MATCHES LOCAL ==="
        
        # Test health endpoint
        echo "Testing health endpoint..."
        HEALTH_RESPONSE=$(curl -s http://localhost:3000/health)
        echo "Health response: $HEALTH_RESPONSE"
        
        # Verify health response contains expected fields
        if echo "$HEALTH_RESPONSE" | grep -q '"status":"healthy"'; then
          echo "✅ Health status: PASSED"
        else
          echo "❌ Health status: FAILED"
          exit 1
        fi
        
        # Test main endpoint
        echo "Testing main endpoint..."
        MAIN_RESPONSE=$(curl -s http://localhost:3000)
        echo "Main response: $MAIN_RESPONSE"
        
        # Verify main response contains expected content (HTML or JSON)
        if echo "$MAIN_RESPONSE" | grep -q "DevOps CI/CD Pipeline" || echo "$MAIN_RESPONSE" | grep -q '"message":"Welcome to DevOps Sample App"'; then
          echo "✅ Main endpoint: PASSED"
        else
          echo "❌ Main endpoint: FAILED"
          exit 1
        fi
        
        # Test API endpoint
        echo "Testing API endpoint..."
        API_RESPONSE=$(curl -s http://localhost:3000/api)
        echo "API response: $API_RESPONSE"
        
        # Verify API response contains expected fields
        if echo "$API_RESPONSE" | grep -q '"message":"API is working!"'; then
          echo "✅ API endpoint: PASSED"
        else
          echo "❌ API endpoint: FAILED"
          exit 1
        fi
        
        echo "=== ALL OUTPUT VERIFICATION TESTS PASSED ==="
        echo "✅ Output matches local environment"
        
        docker stop verification-container
        docker rm verification-container

  # Job 4: Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-test, output-verification]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd src/app
        docker build -f ../../docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:dev-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev-latest

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: $CONTAINER_NAME
        image: ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: $ECS_SERVICE
        cluster: $ECS_CLUSTER
        wait-for-service-stability: true

  # Job 5: Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, output-verification]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd src/app
        docker build -f ../../docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: $CONTAINER_NAME
        image: ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: $ECS_SERVICE
        cluster: $ECS_CLUSTER
        wait-for-service-stability: true

    - name: Run smoke tests
      run: |
        # Add your smoke tests here
        echo "Running smoke tests against production environment"
        # curl -f https://your-production-url.com/health || exit 1
